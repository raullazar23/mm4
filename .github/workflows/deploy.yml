name: Deploy to EC2
on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}
  

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add EC2 host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${{ secrets.EC2_PORT }}" "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts

      - name: Ensure target dir exists
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            sudo install -d -o $USER -g $USER -m 755 /opt/scalper

      # Build a single archive so we don't rely on fragile globs
      - name: Create deploy tarball
        run: |
          set -euo pipefail
          FILES="Dockerfile requirements.txt docker-compose.yml scalp.py"
          if [ -d observability ]; then
            tar czf package.tgz $FILES observability
          else
            tar czf package.tgz $FILES
          fi
          ls -lh package.tgz

      - name: Upload tarball to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          source: package.tgz
          target: /opt/scalper
          overwrite: true
          debug: true

      - name: Extract & restart on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            set -e
            cd /opt/scalper
            tar xzf package.tgz
            rm -f package.tgz
            if [ ! -f config.json ]; then
              echo "ERROR: /opt/scalper/config.json missing (put API keys on server)" >&2
              exit 1
            fi
            docker compose down || true
            docker compose build
            docker compose up -d
            docker image prune -f || true
            docker compose ps
